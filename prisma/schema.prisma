// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model letter_reciver {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email String @unique
  name  String
}

model User {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  age              Int
  username         String    @unique
  firstname        String
  lastname         String
  email            String    @unique
  sex              String
  birthday         String
  password         String
  sessions         Session[]
  pfp              String?
  diet_profile     String?
  physical_profile String?
  mental_profile   String?
  cartid           String?
  currentPathid    String?
  workouts         String[]
}

model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  expiresAt DateTime @db.Timestamptz()
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid

  @@index([userId])
}

model diet_profile {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  userId        String   @db.Uuid
  hasAllergies  Boolean
  allergies     String[]
  existingDiet  String
  religiousDiet String
  hasDisease    Boolean
  diseases      String[]
  BMR           Float?
  AMR           Float?
}

model physical_profile {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  useriD          String   @db.Uuid
  weight          Int
  height_str      String
  hasDisabilities Boolean
  disabilites     String[]
  strength        Int
  endurance       Int
  bmi             Float?
  height_inches   Int
}

model mental_profile {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userID              String   @db.Uuid
  hasMentalIllness    Boolean
  happinessLevel      Int
  mental_illneses     String[]
  isReligious         Boolean
  current_religion    String   @default("none")
  relationship_status String   @default("single")
  employment_status   String   @default("unemployed")
}

model goal {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  userId             String  @db.Uuid
  name               String
  expectedCompletion String
  startTime          String
  status             String  @default("not started")
  description        String?
  timeType           String
}

model product {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String
  price Float
  image String
}

model cart {
  id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String   @db.Uuid
  items  String[]
  total  Float    @default(0)
}

model pathItem {
  id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name   String
  img    String
  status String
  //all the path linking
  prev   String?
  left   String?
  right  String?
  pathid String
}

model path {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  description String
  thumbnail   String
  keywords    String[]
  firstId     String?  @db.Uuid
}

model spot {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String
  image   String
  address String
  weblink String
}

//workout stuff

enum exerciseType {
  CARDIO
  ENDURANCE
  LIFTING
  CALISTHENICS
}

enum stretchType {
  //warmups
  HIP_CIRCLES
  ARM_CIRCLES
  ARM_SWINGS
  FORWARD_JOG
  BACKWARD_JOG
  SIDE_STEP
  HIGH_KNEES
  BRAIDING
  //cooldowns
  CHILDS_POSE
  CAT_COW
  STANDING_CHEST_OPENER
  OVERHEAD_TRICEPS_STRETCH
  SEATED_FORWARD_BEND
  KNEE_TO_CHEST_STRETCH
  QUAD_STRETCH
  HAMSTRING_STRETCH
  CALF_STRETCH
}

model stretch {
  id   String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type stretchType
  reps Int
}

model exercise {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type       exerciseType
  activityid String
  workout    workout[]
}

model countedActivity {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sets Int
  rps  Int //reps per set
}

model timedActivity {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  minutes Int
  seconds Int
}

model workout {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String
  warmupStretchid   String
  mainExercise      exercise @relation(fields: [mainExerciseid], references: [id])
  mainExerciseid    String   @db.Uuid
  coolDownStretchid String
}

//diet stuff

enum drinkType {
  WATER
  COFFEE
  OJ
  AJ
  MILK
  CHOCOLATE_MILK
  SPORTS_DRINK
  TEA
  SPARKLING_WATER
  RED_WINE
}

enum protienType {
  EGGS
  BACON
  STEAK
  SAUSAGE
  TURKEY
  HAM
  SALAMI
  FISH
  CHICKEN
  LAMB
  PORK
}

enum vegType {
  SPINACH
  PEPPERS
  TOMATOES
  AVOCADO
  LETTUCE
  BROCCOLI
  ASPARAGUS
}

enum fruitType {
  STRAWBERRY
  ORANGE
  APPLE
  BLUEBERRY
  WATERMELON
}

enum carbType {
  HASHBROWN
  OATMEAL
  GRANOLA
  BAKED_POTATO
  RICE
  BROWN_RICE
  NOODLES
  QUINOA
  MASHED_POTATO
}

model meal {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  drink       drinkType
  mainProtien protienType
  vegtable    vegType
  fruit       fruitType
  carb        carbType
}

model diet {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  breakfastid String @db.Uuid
  lunchid     String @db.Uuid
  dinner      String @db.Uuid
}

//social stuff

model socialCard {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userid   String
  number   String
  xHandle  String
  FBhandle String
  IGHandle String
}

model group {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  associatedKeywords String
  thumbnail          String
  members            String[]
}
